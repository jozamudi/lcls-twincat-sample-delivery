<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_RCC" Id="{47a0acf2-060b-4e55-9edc-089d8f8e62bc}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_RCC
VAR_IN_OUT
	RCC_VRC_01 : FB_VRC_NC_ClsLS;
	RCC_VRC_02 : FB_VRC;
	RCC_VRC_03 : FB_VRC_NC_ClsLS;
	RCC_VRC_04 : FB_VRC_NC_ClsLS;
	RCC_GCP_01 : FB_901_ECAT;
END_VAR
VAR
	{attribute 'pytmc' :=' pv: ILK_Setpoint '}
    RCC_GCP_01_INTERLOCK_SETPOINT : REAL := 10;
	{attribute 'pytmc' :=' pv: OverrideMode '}
	xSystemOverrideMode_RCC : BOOL := FALSE;
	{attribute 'pytmc' :=' pv: sLogMessage '}
	sLogMessage : T_MaxString := "";
	fbFormat   : FB_FormatString;
	
	tTimer1 : TON;
	current_state : INT := 0;
	start_cycle : BOOL  := FALSE;
	
	RCC_VRC_01_OPEN_OK : BOOL;
    RCC_VRC_02_OPEN_OK : BOOL;
    RCC_VRC_03_OPEN_OK : BOOL;
    RCC_VRC_04_OPEN_OK : BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
(* Valve can open only when CRIX-RCC-VRC-02 and 03 are closed*)
RCC_VRC_01_OPEN_OK := ( RCC_VRC_02.iq_stValve.i_xClsLS AND NOT RCC_VRC_02.iq_stValve.q_xOPN_DO ) AND
                                    ( RCC_VRC_03.iq_stValve.i_xClsLS AND NOT RCC_VRC_03.iq_stValve.q_xOPN_DO ) ;

RCC_VRC_01(i_xExtILK_OK := RCC_VRC_01_OPEN_OK,
                i_xOverrideMode := xSystemOverrideMode_RCC,
                 iq_stValve=> );

(* Valve can open only when CRIX-RCC-VRC-01 and 04 are closed*)
RCC_VRC_02_OPEN_OK := ( RCC_VRC_01.iq_stValve.i_xClsLS AND NOT RCC_VRC_01.iq_stValve.q_xOPN_DO ) AND
                                    ( RCC_VRC_04.iq_stValve.i_xClsLS AND NOT RCC_VRC_04.iq_stValve.q_xOPN_DO );

RCC_VRC_02(i_xExtILK_OK := RCC_VRC_02_OPEN_OK,
                i_xOverrideMode := xSystemOverrideMode_RCC,
                 iq_stValve=> );

(* Valve can open only when CRIX-RCC-GCP-01 reading < setpoint Torr and CRIX-RCC-VRC-01 and 04 are closed*)
RCC_VRC_03_OPEN_OK := (RCC_GCP_01.PG.rPRESS < RCC_GCP_01_INTERLOCK_SETPOINT and RCC_GCP_01.PG.xPRESS_OK ) AND
                                 ( RCC_VRC_01.iq_stValve.i_xClsLS AND NOT RCC_VRC_01.iq_stValve.q_xOPN_DO ) AND
                                              ( RCC_VRC_04.iq_stValve.i_xClsLS AND NOT RCC_VRC_04.iq_stValve.q_xOPN_DO );

RCC_VRC_03(i_xExtILK_OK := RCC_VRC_03_OPEN_OK,
                i_xOverrideMode := xSystemOverrideMode_RCC,
                 iq_stValve=> );

(* Valve can open only when CRIX-RCC-VRC-02 and 03 are closed*)
RCC_VRC_04_OPEN_OK := ( RCC_VRC_02.iq_stValve.i_xClsLS AND NOT RCC_VRC_02.iq_stValve.q_xOPN_DO ) AND
                                      ( RCC_VRC_03.iq_stValve.i_xClsLS AND NOT RCC_VRC_03.iq_stValve.q_xOPN_DO ) ;

RCC_VRC_04(i_xExtILK_OK := RCC_VRC_04_OPEN_OK,
                i_xOverrideMode := xSystemOverrideMode_RCC,
                 iq_stValve=> );	
			]]></ST>
    </Implementation>
    <Method Name="cycle" Id="{873a0ec1-7e3e-4c72-9ad9-eb621e189141}">
      <Declaration><![CDATA[METHOD PUBLIC cycle : BOOL
VAR_INPUT
	t1 : TIME := T#20s;
	t2 : TIME := T#10s;
	t3 : TIME := T#5s;
	t4 : TIME := T#10s;
	run_clean : BOOL := TRUE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE current_state OF
	-1:
		IF start_cycle THEN 
			current_state := 0; 
			start_cycle := FALSE;
		END_IF
		
	0:
		RCC_VRC_01.iq_stValve.q_xOPN_DO := FALSE;
		RCC_VRC_02.iq_stValve.q_xOPN_DO := FALSE;
		RCC_VRC_03.iq_stValve.q_xOPN_DO := FALSE;
		RCC_VRC_04.iq_stValve.q_xOPN_DO := FALSE;
		current_state:=1;
		
	1: // OPEN
		tTimer1(IN:=TRUE, PT:=t1);
		RCC_VRC_02.iq_stValve.q_xOPN_DO := TRUE;
	
		IF tTimer1.Q THEN 
			current_state := 2;
			tTimer1(IN:=FALSE); // RESTART TIMER
		END_IF
		
	2:	// DRAIN_1
		IF RCC_VRC_03_OPEN_OK THEN 
			IF run_clean THEN RCC_VRC_02.iq_stValve.q_xOPN_DO := FALSE; END_IF
			RCC_VRC_03.iq_stValve.q_xOPN_DO := TRUE;
			current_state := 3; 
		END_IF
		
	3:	// DRAIN_2
		tTimer1(IN:=TRUE, PT:=t2);
		
		IF tTimer1.Q THEN 
			current_state := 4;
			IF NOT RCC_VRC_03_OPEN_OK THEN current_state := 1; END_IF
 			RCC_VRC_03.iq_stValve.q_xOPN_DO := FALSE;
			IF NOT run_clean THEN RCC_VRC_02.iq_stValve.q_xOPN_DO := FALSE; END_IF
			tTimer1(IN:=FALSE); // RESTART TIMER
		END_IF
		
	4: // OPEN VRC_01 for T3
		tTimer1(IN:=TRUE, PT:=t3);
		RCC_VRC_01.iq_stValve.q_xOPN_DO := TRUE;
		IF tTimer1.Q THEN 
			current_state := 5;
			tTimer1(IN:=FALSE); // RESTART TIMER
		END_IF
		
	5: // OPEN VRC_04 for T4
		tTimer1(IN:=TRUE, PT:=t4);
		RCC_VRC_04.iq_stValve.q_xOPN_DO := TRUE;
		IF tTimer1.Q THEN 
			current_state := -1;
			RCC_VRC_01.iq_stValve.q_xOPN_DO := FALSE;
			RCC_VRC_04.iq_stValve.q_xOPN_DO := FALSE;
			tTimer1(IN:=FALSE); // RESTART TIMER
		END_IF	
	
	
END_CASE
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>