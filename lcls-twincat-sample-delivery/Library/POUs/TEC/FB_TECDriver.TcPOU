<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.0.26">
  <POU Name="FB_TECDriver" Id="{d0441435-6df2-4301-99ec-8a8b8cf80011}">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_TECDriver

VAR_INPUT
    i_xExecute				: BOOL;					(* rising edge execute *)
    i_tTimeOut				: TIME := t#10s;  		(* Maximum wait time for reply *)
    i_stControl				: ST_TECControl;
END_VAR
VAR_OUTPUT
    q_xDone					: BOOL;
    q_xError				: BOOL;
    q_xWarning				: BOOL;					(* set in the event of an unexpected reply *)
    q_xTimeout				: BOOL;
    q_sResult				: STRING(255);
    q_sLastSentString		: ARRAY[1..40] OF STRING;				(* Last String Sent to Serial Device - for debugging *)
    q_sLastReceivedString	: ARRAY[1..40] OF STRING;				(* Last String Received from Serial Device - for debugging *)
    q_stStatus				: ST_TECStatus;
END_VAR
VAR_IN_OUT
    iq_stSerialRXBuffer 	: ComBuffer;
    iq_stSerialTXBuffer 	: ComBuffer;
END_VAR
VAR
    rtExecute				: R_TRIG;
    iStep					: INT;
    sSendData				: STRING;
    fbTECTransaction		: FB_TECTransaction;
    (*fbFormatString			: FB_FormatString;*)
    (*fbSplit					: FB_Split255;*)
    asReplyFields			: ARRAY[1..20] OF T_MaxString;
    wChecksum: WORD;
    rtStartIntegration: R_TRIG;
    rtEndReset: R_TRIG;

    sWorking: STRING;
    strResponseExpected: STRING;
    diWorking	:	DINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* This function block performs serial communication with a TC-36-25 TEC Driver *)

(* rising edge trigger *)
rtExecute(CLK:= i_xExecute);
IF rtExecute.Q  THEN
    q_xDone	:= FALSE;
    q_xError := FALSE;
    q_xWarning := FALSE;
    q_xTimeout := FALSE;
    q_sResult:= '';
    fbTECTransaction( i_xExecute:= FALSE, iq_stSerialRXBuffer:= iq_stSerialRXBuffer, iq_stSerialTXBuffer:= iq_stSerialTXBuffer );  (* reset *)

    iStep := 10;
END_IF

CASE iStep OF
    0: (* idle *)
        ;

    10: (* Get Current Temperature *)
        fbTECTransaction(
            i_xExecute:= TRUE,
            i_sAddress:=i_stControl.sAddress,
            i_sCmd:= '01',
            i_diParameter := 0,
            i_tTimeOut:= i_tTimeOut,
            iq_stSerialRXBuffer:= iq_stSerialRXBuffer,
            iq_stSerialTXBuffer:= iq_stSerialTXBuffer,
            i_CmdFlag :=FALSE);

        IF fbTECTransaction.q_xError THEN
            q_sResult := CONCAT('in Step 10 serial transaction failed with message: ', fbTECTransaction.q_sResult);
            iStep := 9000;
        ELSIF fbTECTransaction.q_xDone THEN
            q_stStatus.sReply := fbTECTransaction.q_sResponseData;
            sWorking :=LEFT(q_stStatus.sReply, 8);
            sWorking := CONCAT('16#', sWorking);
            q_stStatus.diTemp1 := STRING_TO_DINT(sWorking);
            fbTECTransaction( i_xExecute:= FALSE, iq_stSerialRXBuffer:= iq_stSerialRXBuffer, iq_stSerialTXBuffer:= iq_stSerialTXBuffer, i_CmdFlag :=FALSE);  (* reset *)
            iStep := 20;

        END_IF
    20: (* Read setpoint *)
        fbTECTransaction(
            i_xExecute:= TRUE,
            i_sAddress:=i_stControl.sAddress,
            i_sCmd:= '03', // command
            i_diParameter := 0, // always zero for query
            i_tTimeOut:= i_tTimeOut,
            iq_stSerialRXBuffer:= iq_stSerialRXBuffer,
            iq_stSerialTXBuffer:= iq_stSerialTXBuffer,
            i_CmdFlag :=FALSE);

        IF fbTECTransaction.q_xError THEN
            q_sResult := CONCAT('in Step 20 serial transaction failed with message: ', fbTECTransaction.q_sResult);
            iStep := 9000;
        ELSIF fbTECTransaction.q_xDone THEN
            q_stStatus.sReply := fbTECTransaction.q_sResponseData;
            sWorking :=LEFT(q_stStatus.sReply, 8);
            sWorking := CONCAT('16#', sWorking);
            q_stStatus.diSetPoint := STRING_TO_DINT(sWorking);
            fbTECTransaction( i_xExecute:= FALSE, iq_stSerialRXBuffer:= iq_stSerialRXBuffer, iq_stSerialTXBuffer:= iq_stSerialTXBuffer, i_CmdFlag :=FALSE);  (* reset *)
            iStep := 25;
        END_IF

    25: (* Read output ON/OFF *)
        fbTECTransaction(
            i_xExecute:= TRUE,
            i_sAddress:=i_stControl.sAddress,
            i_sCmd:= '46', // command
            i_diParameter := 0, // always zero for query
            i_tTimeOut:= i_tTimeOut,
            iq_stSerialRXBuffer:= iq_stSerialRXBuffer,
            iq_stSerialTXBuffer:= iq_stSerialTXBuffer,
            i_CmdFlag :=FALSE);

        IF fbTECTransaction.q_xError THEN
            q_sResult := CONCAT('in Step 25 serial transaction failed with message: ', fbTECTransaction.q_sResult);
            iStep := 9000;
        ELSIF fbTECTransaction.q_xDone THEN
            q_stStatus.sReply := fbTECTransaction.q_sResponseData;
            sWorking :=LEFT(q_stStatus.sReply, 8);
            sWorking := CONCAT('16#', sWorking);
            diWorking := STRING_TO_DINT(sWorking);
            q_stStatus.xOutputOn := DINT_TO_BOOL(diWorking);
            A_ResetTransaction();
            iStep := 30;
        END_IF

    30: (* Read the alarm status *)
        fbTECTransaction(
            i_xExecute:= TRUE,
            i_sAddress:=i_stControl.sAddress,
            i_sCmd:= '05', // command
            i_diParameter := 0, // always zero for query
            i_tTimeOut:= i_tTimeOut,
            iq_stSerialRXBuffer:= iq_stSerialRXBuffer,
            iq_stSerialTXBuffer:= iq_stSerialTXBuffer,
            i_CmdFlag :=FALSE);

        IF fbTECTransaction.q_xError THEN
            q_sResult := CONCAT('in Step 10 serial transaction failed with message: ', fbTECTransaction.q_sResult);
            iStep := 9000;
        ELSIF fbTECTransaction.q_xDone THEN
            q_stStatus.sReply := fbTECTransaction.q_sResponseData;
            sWorking :=LEFT(q_stStatus.sReply, 8);
            sWorking := CONCAT('16#', sWorking);
            diWorking := STRING_TO_DINT(sWorking);

            //Alarm assignment
            q_stStatus.xHiTemp	:=	diWorking.0;
            q_stStatus.xLoTemp	:=	diWorking.1;
            q_stStatus.xLoTemp	:=	diWorking.2;
            q_stStatus.xOverCurrent	:=	diWorking.3;
            q_stStatus.xOpenInput1	:=	diWorking.4;
            q_stStatus.xOpenInput2	:=	diWorking.5;
            q_stStatus.xDriverLowVoltage	:=	diWorking.6;

            fbTECTransaction( i_xExecute:= FALSE, iq_stSerialRXBuffer:= iq_stSerialRXBuffer, iq_stSerialTXBuffer:= iq_stSerialTXBuffer, i_CmdFlag :=FALSE);  (* reset *)
            iStep := 40;
        END_IF

    40: (* Output Power *)
        fbTECTransaction(
            i_xExecute:= TRUE,
            i_sAddress:=i_stControl.sAddress,
            i_sCmd:= '02', // command
            i_diParameter := 0, // always zero for query
            i_tTimeOut:= i_tTimeOut,
            iq_stSerialRXBuffer:= iq_stSerialRXBuffer,
            iq_stSerialTXBuffer:= iq_stSerialTXBuffer,
            i_CmdFlag :=FALSE);

        IF fbTECTransaction.q_xError THEN
            q_sResult := CONCAT('in Step 10 serial transaction failed with message: ', fbTECTransaction.q_sResult);
            iStep := 9000;
        ELSIF fbTECTransaction.q_xDone THEN
            q_stStatus.sReply := fbTECTransaction.q_sResponseData;
            sWorking :=LEFT(q_stStatus.sReply, 8);
            sWorking := CONCAT('16#', sWorking);
            diWorking := STRING_TO_DINT(sWorking);

            q_stStatus.diPercentOut := (diWorking/511)*100; //in percentage

            fbTECTransaction( i_xExecute:= FALSE, iq_stSerialRXBuffer:= iq_stSerialRXBuffer, iq_stSerialTXBuffer:= iq_stSerialTXBuffer, i_CmdFlag :=FALSE);  (* reset *)
            iStep := 5000;
        END_IF

    5000: (* Change Setpoint *)
        IF q_stStatus.diSetpoint <> i_stControl.diTempSetpoint THEN

            fbTECTransaction(
                i_xExecute:= TRUE,
                i_sAddress:=i_stControl.sAddress,
                i_sCmd:= '1c', // command
                i_diParameter := i_stControl.diTempSetpoint,
                i_tTimeOut:= i_tTimeOut,
                iq_stSerialRXBuffer:= iq_stSerialRXBuffer,
                iq_stSerialTXBuffer:= iq_stSerialTXBuffer,
                i_CmdFlag :=TRUE);
            IF fbTECTransaction.q_xError THEN
                q_sResult := CONCAT('in Step 5000 serial transaction failed with message: ', fbTECTransaction.q_sResult);
                iStep := 9000;
            ELSIF fbTECTransaction.q_xDone THEN
                fbTECTransaction(
                     i_xExecute:= FALSE,
                    iq_stSerialRXBuffer:= iq_stSerialRXBuffer,
                    iq_stSerialTXBuffer:= iq_stSerialTXBuffer,
                    i_CmdFlag:=FALSE );  (* reset *)
                iStep := 5010;
            END_IF
        ELSE
            iStep := 5010;
        END_IF

    5010: (* Output ON/OFF *)
        IF q_stStatus.xOutputOn <> i_stControl.xOutputOn THEN

            fbTECTransaction(
                i_xExecute:= TRUE,
                i_sAddress:=i_stControl.sAddress,
                i_sCmd:= '2d', // command
                i_diParameter := BOOL_TO_DINT(i_stControl.xOutputOn),
                i_tTimeOut:= i_tTimeOut,
                iq_stSerialRXBuffer:= iq_stSerialRXBuffer,
                iq_stSerialTXBuffer:= iq_stSerialTXBuffer,
                i_CmdFlag :=TRUE);
            IF fbTECTransaction.q_xError THEN
                q_sResult := CONCAT('in Step 5010 serial transaction failed with message: ', fbTECTransaction.q_sResult);
                iStep := 9000;
            ELSIF fbTECTransaction.q_xDone THEN
                fbTECTransaction(
                     i_xExecute:= FALSE,
                    iq_stSerialRXBuffer:= iq_stSerialRXBuffer,
                    iq_stSerialTXBuffer:= iq_stSerialTXBuffer,
                    i_CmdFlag:=FALSE );  (* reset *)
                iStep := 8000;
            END_IF
        ELSE
            iStep := 8000;
        END_IF


    8000: (* done *)
        q_xDone := TRUE;
        IF q_sResult = '' THEN
            q_sResult := 'Success';
            q_stStatus.xStatusValid := TRUE;
        END_IF
        IF  i_xExecute = FALSE THEN
            q_xDone:= FALSE;
            iStep := 0;
        END_IF

    9000:
        _A_ClearStatus();
        q_xTimeout := fbTECTransaction.q_xTimeout;
        q_xError := TRUE;
        q_stStatus.xStatusValid := FALSE;


END_CASE

q_sLastSentString := fbTECTransaction.q_sLastSentString;
q_sLastReceivedString := fbTECTransaction.q_sLastReceivedString;]]></ST>
    </Implementation>
    <Action Name="A_ResetTransaction" Id="{974706a1-7d28-466b-81be-ea1bfef32990}">
      <Implementation>
        <ST><![CDATA[fbTECTransaction( i_xExecute:= FALSE, iq_stSerialRXBuffer:= iq_stSerialRXBuffer, iq_stSerialTXBuffer:= iq_stSerialTXBuffer, i_CmdFlag :=FALSE);  (* reset *)]]></ST>
      </Implementation>
    </Action>
    <Action Name="_A_ClearStatus" Id="{d88fb87e-bdf7-4fad-8b1e-a758c865c0c7}">
      <Implementation>
        <ST><![CDATA[q_stStatus.sReply := '';]]></ST>
      </Implementation>
    </Action>
    <ObjectProperties />
  </POU>
</TcPlcObject>