<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.0.24">
  <POU Name="FB_ViciTransaction" Id="{22fcb22c-df6e-4d6a-b2b2-2dcec53ffd2c}">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ViciTransaction
VAR_INPUT
    i_xExecute				: BOOL;				(* Rising edge execute *)
    i_sSendData				: STRING; 			(* Send Data *)
    i_iAddress				:INT;
    i_tTimeOut				: TIME := t#10s;  	(* Maximum wait time for reply *)
    i_CmdFlag: BOOL := FALSE;
END_VAR
VAR_OUTPUT
    q_xDone					: BOOL;
    q_sResponseData			: STRING;
    q_xError				: BOOL;
    q_xTimeout				: BOOL;
    q_sResult				: STRING;
    q_sLastSentString		: ARRAY[1..40] OF STRING;			(* Last String Sent to Serial Device - for debugging *)
    q_sLastReceivedString	: ARRAY[1..40] OF STRING;			(* Last String Received from Serial Device - for debugging *)
END_VAR
VAR_IN_OUT
    iq_stSerialRXBuffer 	: ComBuffer;
    iq_stSerialTXBuffer 	: ComBuffer;
END_VAR
VAR
    rtExecute				: R_TRIG;
    iStep					: INT;
    fbClearComBuffer		: ClearComBuffer;
    fbSendString			: SendString;
    fbReceiveString			: ReceiveString;
    sReceivedString			: STRING;
    tonTimeout				: TON;
    sSendString: STRING;
    iStringTx: INT := 1;
    iStringRx: INT := 1;

    iStringTxRx: INT := 1;
    sTxRxString: ARRAY[1..40] OF STRING;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* This function block performs serial transactions with a VICI *)

(* rising edge trigger *)
rtExecute(CLK:= i_xExecute);
IF rtExecute.Q THEN
    q_xDone	:= FALSE;
    q_sResponseData := '';
    q_xError := FALSE;
    q_xTimeout := FALSE;
    q_sResult:= '';
    q_sLastSentString[iStringTx] := '';
    q_sLastReceivedString[iStringRx]:= '';
    iStep := 10;
END_IF

CASE iStep OF
    0:
        ; (* idle *)

    10: (* clear com buffers *)
        fbClearComBuffer(Buffer:= iq_stSerialRXBuffer);
        fbClearComBuffer(Buffer:= iq_stSerialTXBuffer);
        (* Reset receive *)
        fbReceiveString(
            Reset:= TRUE,
            ReceivedString:= sReceivedString,
            RXbuffer:= iq_stSerialRXBuffer );
        (* send the string *)
        sSendString := INT_TO_STRING(i_iAddress); (*building address header *)
        sSendString := CONCAT(sSendString, i_sSendData); (* adding the header *)
        sSendString := CONCAT(sSendString,'$R$L'); (* add <cr><lf> *) (*adding tail *)
        fbSendString( SendString:= sSendString, TXbuffer:= iq_stSerialTXBuffer );
        q_sLastSentString[iStringTx] := sSendString;
IF iStringTx = 40 THEN iStringTx := 1; ELSE iStringTx := iStringTx +1; END_IF
        iStep := iStep + 10;

    20: (* Finish sending the String *)
        IF fbSendString.Busy THEN
            fbSendString( SendString:= sSendString, TXbuffer:= iq_stSerialTXBuffer );
        ELSIF fbSendString.Error <> 0 THEN
            q_sResult := CONCAT('In step 20 fbSendString resulted in error: ', INT_TO_STRING(fbSendString.Error));
            iStep := 9000;
        ELSIF NOT fbSendString.Busy THEN
            (* if we are sending a position change request then we expect no reply *)
            IF i_CmdFlag THEN
                q_sResult := 'String sent....';
                q_xDone:= TRUE;
                iStep := 100;
            ELSE
                iStep:=iStep + 10;
            END_IF
        END_IF
        tonTimeout(IN:= FALSE);

    30: (* Get reply *)
        fbReceiveString(
            Prefix:= ,
            Suffix:= '$R',
            Timeout:= i_tTimeOut,
            Reset:= FALSE,
            ReceivedString:= sReceivedString,
            RXbuffer:= iq_stSerialRXBuffer );
        tonTimeout(IN:= TRUE, PT:= i_tTimeOut);
        IF fbReceiveString.Error <> 0 THEN
            q_sResult := CONCAT('In step 30 fbReceiveString resulted in error: ', INT_TO_STRING(fbReceiveString.Error));
            iStep := 9000;
        ELSIF fbReceiveString.RxTimeout OR tonTimeout.Q THEN
            q_sResult := 'Serial device failed to reply within timeout period';
            q_xTimeout := TRUE;
            iStep := 9000;
        ELSIF fbReceiveString.StringReceived THEN
            q_sLastReceivedString[iStringRx] := sReceivedString;
            IF iStringRx = 40 THEN iStringRx := 1; ELSE iStringRx := iStringRx +1; END_IF
            IF LEN(sReceivedString) < 2 THEN
                q_sResult := 'Reply too short.';
                iStep := 9000;
            ELSE
                q_sResponseData := LEFT(sReceivedString,LEN(sReceivedString)-1);
                q_sResult := 'Success.';
                q_xDone:= TRUE;
                iStep := 100;

            END_IF
        END_IF




    100: (* done *)
        IF  i_xExecute = FALSE THEN
            q_xDone:= FALSE;
            iStep := 0;
        END_IF
        IF NOT i_CmdFlag THEN
            sTxRxString[iStringTxRx]:=CONCAT(CONCAT(q_sLastSentString[iStringTx], ' received '), q_sLastReceivedString[iStringRx]);
        END_IF
        IF iStringTxRx = 40 THEN iStringTxRx := 1; ELSE iStringTxRx := iStringTxRx +1; END_IF

    9000:
        q_xError := TRUE;;




END_CASE]]></ST>
    </Implementation>
    <ObjectProperties />
  </POU>
</TcPlcObject>